Instalar:
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Design
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools

=============== 01 - DBFirst ===============
EF Core Power Tools

Executar o comando para criar o context a partir de um banco de dados
dotnet ef dbcontext scaffold "Server=SLT-002411\SQLEXPRESS;Database=Northwind;Trusted_Connection=True" Microsoft.EntityFrameworkCore.SqlServer --output-dir Domain --context-dir Data
dotnet ef dbcontext scaffold "Server=SLT-002411\SQLEXPRESS;Database=Northwind;Trusted_Connection=True" Microsoft.EntityFrameworkCore.SqlServer --output-dir Domain --context-dir Data --table Products --table Categories

=============== 02 - CodeFirst ===============
Executar o comando para criar o migrations
dotnet ef migrations add initial
dotnet ef database update

Executar o comando reverter o migrations
dotnet ef database update 0 (executar esse comando caso já tenho aplicar o migrations)
dotnet ef migrations remove

=============== 03 - SeedData ===============
Existe 3 aborgagens para popular o banco de dados

1 - Por código
Veja a classe SeedDatabase

2 - Por migrations
Veja a migration seed-database
Adicionar uma nova migration e dentro dos métodos Up e Down definir comandos SQL

3 - Por HasData
Veja ModelBuilderExtensions.SeedDatabase()
Dentro do método OnModelCreating() na classe de context, adicionar modelBuilder.Entity<"ENTIDADE">().HasData()

=============== 04 - Configurações - Convenções ===============
- Chave Primária: o EF Core ira criar a coluna chave primária
- Chave Estrangeira: a chave estrangeira deve ter o mesmo tipo de dados que a propriedade chave primária da entidade principal
- Schema : o EF Core cria o schema padrão dbo
- Colunas das tabelas: o EF Core cria os nomes das colunas com o mesmo nome da propriedade da classe
- Tipos de dados das colunas: o tipo de dados vai depender de como o provedor do banco de dados mapeou o tipo de dados C# para o tipo de dados do banco de dados
- Tabelas: o EF Core irá mapear uma entidade para uma tabela com o mesmo nome da propriedade DbSet<T>, 
caso a entidade não tenha sido mapeado para um DbSet<T>, o EF Core ira criar a tabela com base nas propriedade de navegação. 
Ver a classe cliente que tem a propriedade uma coleção de animais e não existe o DbSet<Animal> na classe de contexto.

Relacionamentos
Has de ser combinada com um With para configurar um relacionamento válido

Has
	HasOne: usado nas propriedades de navegação de referência
	HasMany: usado nas propriedades de navegação de coleção

With
	WithOne: usado nas propriedades de navegação de referência
	WithMany: usado nas propriedades de navegação de coleção


HasOne: Configura a parte UM do relacionamento, em que uma entidadade contém a propriedade de referência de outro tipo para relacionamentos UM-PARA-UM ou UM-PARA-MUITOS
WithOne: É usado para configurar o lado único de um relacionamento UM-PARA-MUITOS ou UM-PARA-UM. Usando em conjunto com HASONE ou HASMANY.
HasForeignKey: É usado para especificar qual propriedade é a chave estrangeira em um relacionamento

Para um relacionamento UM-PARA-MUITOS
- Se a chave estrangeira for obrigatória o relacionamento será obrigatório
- Se a chave estrangeira for opcional o relacionamento será opcional

Data Annotations:
Indicado para pequenas aplicações
Modelo de dados mais simples
Mais indicada para ser usada com propriedades
Polui o modelo de entidades com atriburos

Fluent API
Indicada para aplicações comerciais
Modelos de domínio complexos
Indicada para definir o relacionamentos (possui mais recursos)
Não polui o modelo de entidades
Sobrescreve as configrações Data Annotaions

Podemos usar as duas abordagens na mesma aplicação mas não é recomendado, fluent api sobre poem os data annotations

Quando você cria uma consulta e usa operadores LINQ, você está criando simplesmente uma representação na memória da consulta.
As consutlas são executadas em um banco de dados apenas quando os dados são consumidos.
Isso é conhecido como execução adiada (deferred execution).
Os dados são consumidos quando você usa um laço for/foreach ou um método de finalização na consulta, como ToList(), Sum() ou Count()

Query in LINQ
https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/queries-in-linq-to-entities

SQL NATIVAS
DbSet.FromSql()

1 - As consultas SQL só podem ser usadas para retornar tipos de entidade que fazem parte do seu modelo.
2 - A consulta SQL deve retornar dados para todas as propriedades da entidade ou tipo de consulta.
3 - Os nome das colunas no conjunto de resultados deve corresponder aos nomes das colunas para as quais as propriedades são mapeadas
4 - A consulta SQL não pode conter dados relacionados
5 - As instruções SQL, diferentes de SELECT, são reconhecidas automaticamente como não combináveis.


JOINS em LINQ

https://www.tektutorialshub.com/entity-framework/join-query-entity-framework/
https://www.tutorialsteacher.com/linq/linq-joining-operator-join


Carregamento de informações nas propriedades

Lazy loading: 
- Os dados são carregados sob demanda, quando a propriedades de navegação for acessada
- Instalar o pacote Microsoft.EntityFrameworkCore.Proxies
- Habilitar o pacote
- O EF Core,v ai habilitar o lazy loading para qualquer propriedade de navegação que pode ser sobrescrita ou seja:
	- A propriedade de navegação deve ser virtual
	- Deve estar em uma classe que poder herdada
- Lazy Loading pode causar problemas de desempenho (select n+1)



